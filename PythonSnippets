# count unique with multiple columns
df.groupby(['col_a', 'col_b']).ngroups

# transformer model
https://huggingface.co/sentence-transformers/multi-qa-MiniLM-L6-cos-v1/tree/main

from google.colab import files
files.upload()

# remove punctuation and digits in a pandas column 
df.poem = df.poem.apply(lambda x: x.translate(None, string.punctuation))
df.poem = df.poem.apply(lambda x: x.translate(None, string.digits))
# using re
df['E'] = df['B'].map(lambda x: re.sub(r'\W+', '', x))

# read muliple files
import os
os.listdir()
os.chdir(‘directory where the files are located’)
files = [file for file in os.listdir()]
df = pd.concat(map(pd.read_csv, files), ignore_index=True)
df.head()

# delete a column
del df[‘Age’]

# sorting a dataframe
df.sort(column=’Age’)

# and filter
df[(df["class"] == 'A') & (df["score"] > 80)]

# filter based on part of a string
# if you need to avoid NaNs df2["Interests"] = df2["Interests"].fillna("")
df[df["Interests"].str.contains("Reading")]
df[df["Interests"].str.contains("reading", case=False)] # ignore case
df[df["Interests"].str.contains(".*V.*")] # with wildcard


# save jupyter notebook to html

%%javascript
IPython.notebook.save_notebook()

import os
os.system('jupyter nbconvert --to html yourNotebook.ipynb')
# or with output
os.system('jupyter nbconvert --execute --to html notebook.ipynb')

# open oft file
import win32com.client as win32
outlook = win32.Dispatch('outlook.application')
mail = outlook.CreateItemFromTemplate(0)

#mail.Open() does not exist... but what instead?
mail.Open('Template1.oft')

mail.HtmlBody = alterEmail(mail.HtmlBody)
mail.Display(True)
mail.Save()

# case when examples
conditions = [
    (df["age"].lt(10)),
    (df["age"].ge(10) & df["age"].lt(20)),
    (df["age"].ge(20) & df["age"].lt(30)),
    (df["age"].ge(30) & df["age"].lt(50)),
    (df["age"].ge(50)),
]
choices = ["baby", "kid", "young", "mature", "grandpa"]

df["elderly"] = np.select(conditions, choices)

# Results in:
#      name  age  preTestScore  postTestScore  elderly
#  0  Jason   42             4             25   mature
#  1  Molly   52            24             94  grandpa
#  2   Tina   36            31             57   mature
#  3   Jake   24             2             62    young
#  4    Amy   73             3             70  grandpa

# using pyjanitor
# pip install git+https://github.com/pyjanitor-devs/pyjanitor.git
import pandas as pd
import janitor as jn

df.case_when(
df.age.lt(10), 'baby', # 1st condition, result
df.age.between(10, 20, 'left'), 'kid', # 2nd condition, result
df.age.between(20, 30, 'left'), 'young', # 3rd condition, result
 df.age.between(30, 50, 'left'), 'mature', # 4th condition, result
'grandpa',  # default if none of the conditions match
 column_name = 'elderly') # column name to assign to
 
    name  age  preTestScore  postTestScore  elderly
0  Jason   42             4             25   mature
1  Molly   52            24             94  grandpa
2   Tina   36            31             57   mature
3   Jake   24             2             62    young
4    Amy   73             3             70  grandpa


# pipe

# Changing the 'host_is_superhost' column values.
def boolean(df):
    df['host_is_superhost'] = df['host_is_superhost'].replace({'f': False, 't':True})
    return df

# Correcting the numbers appearance in 'price' column.
def remove_dollar(df):
    df['price'] = (df['price'].replace({'\$': '', ',':''}, regex = True)
                   .replace({'.':''},).astype('float'))
    return df

# Setting 'Downtown' as the actual neighborhood for residences with 
# touristic place names in 'neighbourhood' column.
def downtown(df):
    touristic = ['Downtown Crossing', 'Government Center', 'Leather District', 
             'Chinatown','Theater District','Financial District']
    
    substitute = {location : 'Downtown' for location in touristic}
    df['neighbourhood'] = df['neighbourhood'].replace(substitute)
    return df
    
# Applying each function generated with 'pipe'.
(airbnb.pipe(boolean)
        .pipe(remove_dollar)
        .pipe(downtown)).head()


# scatter matrix
# You can use a color map in order to customize the dots appearance.
from matplotlib import cm
cmap = cm.get_cmap('gnuplot')
pd.plotting.scatter_matrix(X_train, c = y_train, marker = 'o' ,cmap = cmap, figsize = (8, 8), diagonal = 'kde');

# connect to SharePoint list or file
from office365.runtime.auth.user_credential import UserCredential
from office365.sharepoint.client_context import ClientContext

site_url = "https://yoursharepointsite.com" + f"/sites/{documentsite}/"
ctx = ClientContext(site_url).with_credentials(UserCredential(username, password=password))
ctx.load(ctx.web)
ctx.execute_query()

from office365.sharepoint.files import file
import io

file_url = file_dl if dynamic else f'/sites/{documentsite}/{file_dl}'
response = file.File.open_binary(ctx, file_url)
bytes_file_obj = io.BytesIO()
bytes_file_obj.write(response.content)
bytes_file_obj.seek(0)
return bytes_file_obj

# sample groups
df.groupby('Group_Id').sample(n=1)

# connect to ms access
https://datatofish.com/how-to-connect-python-to-ms-access-database-using-pyodbc/
https://stackoverflow.com/questions/12704305/return-column-names-from-pyodbc-execute-statement
https://stackoverflow.com/questions/16519385/output-pyodbc-cursor-results-as-python-dictionary
# concatenate rows with group by
https://stackoverflow.com/questions/27298178/concatenate-strings-from-several-rows-using-pandas-groupby
# update values from data in another dataframe
https://stackoverflow.com/questions/49928463/python-pandas-update-a-dataframe-value-from-another-dataframe
